<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GringottsBot – A Telegram Bot for Smart Expense Tracking</title>
    <link href="/ziliang.github.io/2025/06/21/gringottsbot/"/>
    <url>/ziliang.github.io/2025/06/21/gringottsbot/</url>
    
    <content type="html"><![CDATA[<p>💰 Managing personal expenses shouldn’t feel like battling a dragon in Gringotts.<br>I built <strong>GringottsBot</strong>, a Telegram bot that acts like a personal goblin accountant — tracking, categorizing, and reporting your expenses in real-time.</p><hr><h2 id="🤖-What-GringottsBot-Does"><a href="#🤖-What-GringottsBot-Does" class="headerlink" title="🤖 What GringottsBot Does"></a>🤖 What GringottsBot Does</h2><p>GringottsBot is a Telegram bot that:</p><ul><li>Accepts commands like <code>/add</code>, <code>/edit</code>, <code>/delete</code> to manage your expenses</li><li>Stores and retrieves data from a <strong>MySQL database</strong> (so it’s persistent)</li><li>Automatically categorizes expenses and supports monthly reports</li><li>Exports to <strong>PDF</strong> report</li><li>Shows statistics like category breakdowns and trends</li><li>Supports timezone awareness for logging</li></ul><p>The goal is to make expense tracking as frictionless and automated as possible — right from Telegram.</p><hr><h2 id="⚙️-Tech-Stack"><a href="#⚙️-Tech-Stack" class="headerlink" title="⚙️ Tech Stack"></a>⚙️ Tech Stack</h2><table><thead><tr><th>Layer</th><th>Tools Used</th></tr></thead><tbody><tr><td>🧠 Bot Logic</td><td>Python + <code>python-telegram-bot</code></td></tr><tr><td>🗃️ Data Store</td><td>MySQL (persistent DB)</td></tr><tr><td>📄 Reports</td><td><code>pandas</code>, <code>matplotlib&#39;, </code>fpdf&#96;</td></tr><tr><td>🌐 Hosting</td><td>PythonAnywhere (24&#x2F;7 uptime)</td></tr><tr><td>⏰ Features</td><td>Timezone support, command-based UX</td></tr></tbody></table><hr><h2 id="📸-Bot-in-Action"><a href="#📸-Bot-in-Action" class="headerlink" title="📸 Bot in Action"></a>📸 Bot in Action</h2><p><img src="/ziliang.github.io/img/gringottsbot-demo.gif" alt="GringottsBot Demo"></p><hr><h2 id="What-I-Learned"><a href="#What-I-Learned" class="headerlink" title="What I Learned"></a>What I Learned</h2><ul><li><p>How to design and implement a stateful Telegram bot</p></li><li><p>Setting up persistent storage with MySQL using foreign keys and indexing</p></li><li><p>Working with inline keyboards, command handlers, and conversation flows</p></li><li><p>Generating Excel and PDF reports programmatically</p></li><li><p>Managing user sessions, timezones, and error handling gracefully</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Telegram Bot</tag>
      
      <tag>MySQL</tag>
      
      <tag>Automation</tag>
      
      <tag>Finance</tag>
      
      <tag>Gringotts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SafeLink Scanner – A Flutter App to Detect Malicious URLs</title>
    <link href="/ziliang.github.io/2025/06/21/safelink-scanner/"/>
    <url>/ziliang.github.io/2025/06/21/safelink-scanner/</url>
    
    <content type="html"><![CDATA[<p>🚫 The internet is filled with shortened URLs, suspicious links, and phishing traps. I built <strong>SafeLink Scanner</strong>, a Flutter app that helps users <strong>check if a link is safe before opening it</strong>.</p><hr><h2 id="🔍-What-the-App-Does"><a href="#🔍-What-the-App-Does" class="headerlink" title="🔍 What the App Does"></a>🔍 What the App Does</h2><p>SafeLink Scanner lets users:</p><ul><li>Paste or share a link from another app</li><li>Automatically check the URL against known threat databases like:<ul><li>🛡️ <a href="https://urlhaus.abuse.ch/">URLHaus</a></li><li>🔎 <a href="https://urlscan.io/">urlscan.io</a></li></ul></li><li>View a clear warning or green-light based on results</li><li>See a visual preview or breakdown of the destination site</li></ul><p>The goal is to <strong>reduce accidental link clicks</strong> on phishing pages or malware payloads.</p><hr><h2 id="🧰-Tech-Stack"><a href="#🧰-Tech-Stack" class="headerlink" title="🧰 Tech Stack"></a>🧰 Tech Stack</h2><table><thead><tr><th>Layer</th><th>Tools &amp; Tech</th></tr></thead><tbody><tr><td>💻 Frontend</td><td>Flutter + Dart</td></tr><tr><td>🌐 APIs</td><td>URLHaus, urlscan.io</td></tr><tr><td>🎨 Design</td><td>Custom UI&#x2F;UX from scratch (using Flutter widgets)</td></tr><tr><td>📱 Platforms</td><td>Android (iOS support planned)</td></tr></tbody></table><hr><h2 id="Lessons-Learnt"><a href="#Lessons-Learnt" class="headerlink" title="Lessons Learnt"></a>Lessons Learnt</h2><p>This project was more than just Flutter development — it taught me:</p><p>🔐 How to call and parse JSON responses from public cybersecurity APIs</p><p>🧩 How to build flexible UI layouts for error states, results, and sharing</p><p>🧠 The importance of security-first thinking in app design</p><p>📦 How to optimize network calls and reduce response time</p><hr><h2 id="📸-App-Demo"><a href="#📸-App-Demo" class="headerlink" title="📸 App Demo"></a>📸 App Demo</h2><p><img src="/ziliang.github.io/img/safelink_scanner.gif" alt="SafeLink Scanner Demo"></p><hr><h2 id="🔗-GitHub-Repository"><a href="#🔗-GitHub-Repository" class="headerlink" title="🔗 GitHub Repository"></a>🔗 GitHub Repository</h2><p>📦 <a href="https://github.com/radioblodo/safelink_scanner">MDP Android Remote App – GitHub</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Flutter</tag>
      
      <tag>Dart</tag>
      
      <tag>API</tag>
      
      <tag>Cybersecurity</tag>
      
      <tag>Mobile App</tag>
      
      <tag>UIUX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Building the MDP Android Remote:Lessons in Embedded Systems, Bluetooth, and Team Collaboration</title>
    <link href="/ziliang.github.io/2025/06/20/mdpapp/"/>
    <url>/ziliang.github.io/2025/06/20/mdpapp/</url>
    
    <content type="html"><![CDATA[<p>As part of NTU’s <strong>Multidisciplinary Design Project (MDP)</strong> — a capstone module for final-year Computer Science students — my team developed a mobile-controlled robot capable of both autonomous and manual navigation.</p><p>The project involved four core components:</p><ul><li>📱 <strong>Android App</strong> (my main role)</li><li>🍓 <strong>Raspberry Pi</strong> (Bluetooth receiver + logic relay)</li><li>🧠 <strong>Pathfinding Algorithm</strong></li><li>🔩 <strong>STM32 Microcontroller</strong> (motor control + sensors)</li></ul><p>Although I was responsible for the Android app, I was actively involved in:</p><ul><li>🛠️ Raspberry Pi development</li><li>🧪 STM32 signal testing and hardware debugging</li><li>👥 Team integration and testing sessions</li></ul><hr><h2 id="🎯-Project-Goals"><a href="#🎯-Project-Goals" class="headerlink" title="🎯 Project Goals"></a>🎯 Project Goals</h2><p>The Android app — developed in <strong>Kotlin</strong> using <strong>Jetpack Compose</strong> — aimed to:</p><ul><li>Establish a <strong>Bluetooth connection</strong> to the Raspberry Pi</li><li>Allow <strong>manual control</strong> of the robot with directional buttons</li><li>Display <strong>live feedback</strong> from the robot (e.g. status updates, position)</li><li>Log the robot’s path for visual tracking and testing</li></ul><hr><h2 id="⚙️-Key-Technical-Highlights"><a href="#⚙️-Key-Technical-Highlights" class="headerlink" title="⚙️ Key Technical Highlights"></a>⚙️ Key Technical Highlights</h2><ul><li>Built a clean and responsive UI from scratch using <strong>Jetpack Compose</strong></li><li>Implemented <strong>Bluetooth socket communication</strong>, managing input&#x2F;output streams efficiently</li><li>Ensured smooth two-way communication for <strong>manual overrides</strong>, <strong>status polling</strong>, and <strong>sensor relay</strong></li><li>Added <strong>live logs</strong> and <strong>status tracking</strong> features for debugging and verification</li></ul><p><img src="/ziliang.github.io/img/mdpproj.jpg" alt="Home Screen Screenshot"></p><hr><h2 id="🧠-What-I-Learned"><a href="#🧠-What-I-Learned" class="headerlink" title="🧠 What I Learned"></a>🧠 What I Learned</h2><ul><li>Deepened my knowledge of <strong>Kotlin</strong>, Android lifecycle, and UI architecture</li><li>Learned to work with <strong>hardware protocols</strong>, especially integrating with the Raspberry Pi and STM32 via Bluetooth and serial</li><li>Gained confidence in debugging issues across multiple platforms (e.g. Android logs, RPi console, STM32 UART output)</li><li>Realized the importance of <strong>cross-functional collaboration</strong> in real-world systems — especially in synchronizing embedded, mobile, and algorithm teams</li></ul><hr><h2 id="🎥-Project-Demo"><a href="#🎥-Project-Demo" class="headerlink" title="🎥 Project Demo"></a>🎥 Project Demo</h2><iframe width="100%" height="315" src="https://www.youtube.com/embed/neUKwJw2OCs" frameborder="0" allowfullscreen></iframe><blockquote><p>📹 <a href="https://www.youtube.com/watch?v=neUKwJw2OCs">Watch on YouTube</a></p></blockquote><hr><h2 id="🔗-GitHub-Repository"><a href="#🔗-GitHub-Repository" class="headerlink" title="🔗 GitHub Repository"></a>🔗 GitHub Repository</h2><p>📦 <a href="https://github.com/ZhiXin18/MDP_AndroidRemote">MDP Android Remote App – GitHub</a></p><hr><h2 id="🏁-Final-Thoughts"><a href="#🏁-Final-Thoughts" class="headerlink" title="🏁 Final Thoughts"></a>🏁 Final Thoughts</h2><p>Although the <strong>STM32 module</strong> posed the most technical difficulty in the project, it was rewarding to work across all major components. I grew not only as a developer, but also as a systems thinker and teammate. This project was one of the most enriching experiences of my time at NTU.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Kotlin</tag>
      
      <tag>Raspberry Pi</tag>
      
      <tag>Bluetooth</tag>
      
      <tag>STM32</tag>
      
      <tag>NTU</tag>
      
      <tag>App Development</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
